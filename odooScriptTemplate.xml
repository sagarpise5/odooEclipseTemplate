<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<templates>
<template name="__openerp__" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false"  
	description="OpenERP Module Descriptor File" enabled="true">{
	"name": "${name_of_module}",
	"version": "1.0",
	"depends": ["base"],
	"author": "${author}",
	'website':'${website}',
	"category": "${category}",
	"description": """
	This module provide :
	'${ModuleDescription}',
	""",
	"init_xml": [],
	"update_xml": [],
	"demo_xml": [],
	"installable": True,
	"active": False,
	"auto_install": False,
#	"images": [${images}],
#	"data": [${data}],
#	"demo": [${demo}],
#	"test": [${test}],     
}
</template>

<template name="_columns" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="_columns" enabled="true" >_columns = {
	${cursor}
}
</template>

<template name="_constraints" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Set openerp constraints" enabled="true">def ${_check_constraints_method}(self, cr, uid, ids): 
	# Check condition and return boolean accordingly
	${cursor}
	return True
	
_constraints = [(${_check_constraints_method}, '${Error_Message}', ['${field_name}']), ] 
</template>

<template name="_sql_constraints" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="_sql_constraints" enabled="true">_sql_constraints = [('name_uniq', 'unique(name)', 'The Name must be unique!'),]
</template>

<template name="_defaults" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Set default value for field" enabled="true">_defaults = {  
		'${datee}': lambda *a: time.strftime('%Y-%m-%d'),  
	}
</template>

<template name="_description" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Description of model" enabled="true">_description = '${model_description}' 
</template>

<template name="_inherit" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Chnage in existing model" enabled="true">_inherit = '${model_name}' 
</template>

<template name="_inherits" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="inherits from existing model" enabled="true" >_inherits = {'${model_name}': '${model_id}'}
</template>

<template name="_name" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Name of model" enabled="true" >_name = '${model_name}' 
</template>

<template name="_order" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Sort record by selected column " enabled="true">_order = '${id}' 
</template>

<template name="_parent_store" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="_parent_store" enabled="true">_parent_store = ${False} 
</template>

<template name="_rec_name" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="_rec_name used in many2field to display name" enabled="true">_rec_name = '${column_name}' 
</template>

<template name="_sequence" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="_sequence" enabled="true">_sequence = ${data} 
</template>

<template name="_table" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Name of table create in database" enabled="true">_table = '${table_name}' 
</template>

<template name="def action_cancel" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="def action_cancel" enabled="true">def action_cancel(self, cr, uid, ids, context=None):
	res = {}
	return res
</template>

<template name="def copy" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="OpenERP copy method" enabled="true">def copy(self, cr, uid, id, default=None, context=None):
	# Duplicate record with given id updating it with default values.
	${cursor}
	return super(${model_name}, self).copy(cr, uid, id, default, context)
</template>

<template name="def create" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="OpenERP create method" enabled="true">def create(self, cr, uid, vals, context={}):
	# Creates a new record for the model.
	${cursor}
	return super(${model_name}, self).create(cr, uid, vals, context)
</template>

<template name="def default_get" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="To get default values for the object." enabled="true">def default_get(self, cr, uid, fields_list, context=None):
	""" To get default values for the object.
	@param self: The object pointer.
	@param cr: A database cursor
	@param uid: ID of the user currently logged in
	@param fields: List of fields for which we want default values
	@param context: A standard dictionary
	@return: A dictionary which of fields with values.
	"""
	res = super(${model_name}, self).default_get(cr, uid, fields, context=context)
	${cursor}
	return res
</template>

<template name="def fields_get" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Return the definition of each field." enabled="true">def fields_get(self, cr, uid, fields=None, context=None):
	# Return the definition of each field.
	${cursor}
	return super(${model_name}, self).fields_get(cr, uid, fields, context, read_access) 
</template>

<template name="def fields_view_get" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Get the detailed composition of the requested view like fields, model, view architecture" 
	enabled="true">def fields_view_get(self, cr, uid, view_id = None, view_type = 'form', context = None, toolbar = False, submenu = False):
	res = super(${ModelName}, self).fields_view_get(cr, uid, view_id, view_type, context = context, toolbar = toolbar, submenu = submenu)
	${cursor}
	return res
</template>

<template name="def name_get" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Returns a textual representation for the records" enabled="true">def name_get(self, cr, uid, ids, context=None):
	# Search on name field or _res_name fields and make a result [(id, name), (id, name), ...] 
	res = self.read(cr, uid, ids, [self._rec_name], context, load='_classic_write')]
	${cursor}
	return res 
</template>

<template name="def name_search" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Search for records that have a display name matching the given `name` pattern when compared with the given `operator`, while also matching the optional search domain (`args`)." 
	enabled="true">def name_search(self, cr, uid, name, args=None, operator='ilike', context=None, limit=80):
	# Make a search on specific fields and get ids
	if not args:
		args=[]
	if not context:
		context={}
	ids = []
	if name:
		ids = self.search(cr, uid, [('code','ilike',name)]+ args, limit=limit)
	if not ids:
		ids = self.search(cr, uid, [('name',operator,name)]+ args, limit=limit)
	self.name_get(cr, uid, ids, context=context) 
</template>

<template name="def on_change" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Perform an onchange on the given field." enabled="true">def onchange_${fieldname}(self, cr, uid, ${fields}, context={}):
	${cursor}
	return {${field_to_change}: ${value_to_set}}
</template>

<template name="def read" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Reads the requested fields for the records" 
	enabled="true">def read(self, cr, uid, ids, fields=None, context=None, load='_classic_read'):
	res = super(${model_name}, self).read(cr, uid, ids, fields, context) 
	# Process on res
	${cursor}
	return res 
</template>

<template name="def search" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Searches for records based on the args" 
	enabled="true">def search(self, cr, uid, args, offset=0, limit=None, order=None, context=None, count=False):
	# Process on args before search
	${cursor}
	res = super(${model_name}, self).search(cr, uid, args, offset, limit, order, context, count)
</template>

<template name="def unlink" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Deletes the records of the current set" enabled="true">def unlink(self, cr, uid, ids, context=None):
	# Process before delete records from ids
	${cursor}
	res super(${model_name}, self).unlink(cr, uid, ids, context)
</template>

<template name="def write" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Updates all records in the current set with the provided values." 
	enabled="true">def write(self, cr, uid, ids, vals, context=None):
	# Process before updates records from ids
	${cursor}
	return super(${model_name}, self).write(cr, uid, ids, vals, context)
</template>

<template name="domain" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Field Attribute : domain" enabled="true">domain=[('${state}','=','${done}'),]
</template>

<template name="help" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Field Attribute : help" enabled="true">help='${HelpAboutField}',
</template>

<template name="readonly" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Field Attribute : readonly" enabled="true">readonly=True,
</template>

<template name="required" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Field Attribute : required" enabled="true">required=True,
</template>

<template name="select" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Field Attribute : select" enabled="true">select = True,
</template>

<template name="store true" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Field Attribute : store" enabled="true">store = True,
</template>

<template name="store function call" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Field Attribute : store" enabled="true">store={
	'${model_name}': (lambda self, cr, uid, ids, c={}: ids, [${field_name}], 10),
	# 'model_name': (_method_return_ids, [field_name], 10),
	}
</template>

<template name="states" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="Field Attribute : States" enabled="true">states={'${draft}':[('readonly',${False})]}
</template>

<template name="fields.binary" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.binary" enabled="true">'${file}':fields.binary('${Label}', filters=${None}), 
</template>

<template name="fields.boolean" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.boolean" enabled="true">'${name}':fields.boolean('${Label}', required=${False}), 
</template>

<template name="fields.char" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.char" enabled="true">'${name}':fields.char('${Label}', size=${64}, required=${False}, readonly=${False}),
</template>

<template name="fields.date" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.date" enabled="true">'${date}': fields.date('${Date}'), 
</template>

<template name="fields.datetime" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.datetime" enabled="true">'${datetime}': fields.datetime('${Date}'), 
</template>

<template name="fields.float" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.float" enabled="true">'${number}': fields.float('${Label}', digits=(${16}, int(config['price_accuracy'])),
</template>

<template name="fields.function" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.function" enabled="true">'${data}': fields.function(${_function_call}, method=True, type='${float}' string='${Label}', store=${True}), 
</template>

<template name="fields.integer" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.integer" enabled="true">'${number}': fields.integer('${Label}') 
</template>

<template name="fields.integer_big" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.integer_big" enabled="true">'${number}': fields.integer_big('${Label}') 
</template>

<template name="fields.many2many" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.many2many" enabled="true">'${data}_ids':fields.one2many('${OpenerpModel}', '${partner}_${category}_rel', ${model1}_id', ${model2}_id', ${Label}'), 
</template>

<template name="fields.many2one" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.many2one" enabled="true">'${data}_id':fields.many2one('${OpenerpModel}', '${Label}', required=${False}), 
</template>

<template name="fields.one2many" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.one2many" enabled="true">'${data}_ids':fields.one2many('${OpenerpModel}', '${field}_id', '${Label}', required=${False}),
</template>

<template name="fields.property" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.property" enabled="true">'property_${name}': fields.property( 
	'${OpenerpModel}',
	type='${many2one}',
	relation='${openerpmodel}',
	string='${Label}',
	method=True,
	view_load=True,
	domain='[('${state}','=','${done}')]',
	help="${Helpdescrip}"
	required=${10:True}),
</template>

<template name="fields.reference" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.reference" enabled="true">'${ref}': fields.reference('${Document}', 
	selection=[
	#TODO : define list of model and Label that will be work as a reference
	('account.account', 'Account'),
	], size=${128}),
</template>

<template name="fields.related" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.related" enabled="true">'${field}_id': fields.related('${relation_field}','${field}_id', type='${many2one}', relation='${openerpmodel}', string=${Label}'), 
</template>

<template name="fields.selection" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.selection : [(draft, Draft)]" enabled="true">'${state}':fields.selection([
	('draft','Draft'),
	('done','Done'),
	 ],	'${State}', select=True, readonly=${True}),
</template>

<template name="fields.selection [def _select_data]" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.selection [def _select_data]" enabled="true">'${state}': fields.selection(${_get_states}, '${data}', required=${True}), 
</template>

<template name="fields.text" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.text" enabled="true">'${note}': fields.text('${Description}'), 
</template>

<template name="fields.time" autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" 
	description="fields.time" enabled="true">'${date}': fields.time('${Time}'),
</template>

=======================================

<template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="New OpenERP Method" enabled="true" name="New OpenERP Method">def ${method}_${name}(self, cr, uid, ids):
	result = None
	#TODO : OpenERP Business Process 
	
	return result
</template>

<template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="OpenERP : model" enabled="true" name="OpenERP : model">from osv import osv
from osv import fields

class ${ClassName}(osv.osv):
 '''
 Open ERP Model
 '''
	_name = '${openerpmodel}'
	_description = '${openerpmodel}'
 
	_columns = {
			'${name}':fields.char('${data}', size={64}, required={False}, readonly={False}),
		}
${ClassName}()
</template>

<template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="OpenERP License" enabled="true" name="OpenERP License">
# -*- encoding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (http://tiny.be). All Rights Reserved
#    
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see http://www.gnu.org/licenses/.
#
##############################################################################
</template>

<template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="OpenERP wizard" enabled="true" name="OpenERPwizard">import wizard
import pooler

class ${SendEmail}(wizard.interface):
	 '''
	 OpenERP Wizard
	 '''
	 ${form} = '''
			&lt;?xml version="1.0"?&gt;
			&lt;form string="Process Form"&gt;
			&lt;field name="${field}"/&gt;
			&lt;/form&gt;  '''

	 ${fields} = {
			'${field}': {'string': '${Label}', 'type': 'many2one', 'relation': 'res.company'},
		}

	 def ${_get_defaults}(self, cr, uid, data, context):
		#TODO : initlize required data
		return data['form'] 

	 def ${_do_duplicate}(self, cr, uid, data, context):
		pool = pooler.get_pool(cr.dbname)
		return {}
		
	 states = {
		'init': {
			'actions': [${_get_defaults}],
			'result': {'type': 'form', 'arch': ${form}, 'fields': ${fields}, 'state': (('end', 'Cancel'), ('${process}', 'Process'))},
		},
		'${process}': {
			'actions': [${_do_duplicate}],
			'result': {'type': 'state', 'state': 'end'},
		},
	}
${SendEmail}('${modelprocess}')
</template>

<template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="wizard state : end" enabled="true" name="wizard state : end">'${check}': {
	'actions': [],
	'result': {'type':'choice','next_state':self.${_check_condition}}
	#TODO : define def ${_check_condition}(self, cr, uid, data, context):
	},
</template>

<template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="wizard States : choice" enabled="true" name="wizard States : choice">'${check}': {
	'actions': [],
	'result': {'type':'choice','next_state':self.${_check_condition}}
	#TODO : define def ${_check_condition}(self, cr, uid, data, context): },
</template>

<template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="wizard States : form" enabled="true" name="wizard States : form">'${form}': {
	'actions': [],
	'result': {'type': 'form', 'arch': form, 'fields': fields, 'state': (('end', 'Cancel'), ('process', 'Process'))},
	},
</template>

<template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="wizard States : print" enabled="true" name="wizard States : print">'${report}':{
	'actions': [],
	'result': {'type':'print', 'report':'${modelreportname}', 'state':'${end}'}
	},
</template>

<template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="wizard_oe_7" enabled="true" name="wizard_oe_7">from osv import osv, fields
from tools.translate import _
import time

class $${openerp_wizard}(osv.osv_memory):
    """ OpenERP Wizard  Version 7"""

    _name = '$${openerp.wizard}'

     _columns = {
            '$${field}': {'string': '${Label}', 'type': 'many2one', 'relation': 'res.company'},
                }

$${openerp_wizard}()
</template>

</templates>
